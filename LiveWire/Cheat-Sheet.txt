$ php artisan make:livewire ComponentName
===============================================MODEL::truncate();
wire:ignore.self
wire:ignore??? >> What it Does ?
===============================================
wire:submit.prevent
wire:submit.prevent='Function()'
===============================================
wire:model="propery"
wire:model.blur="propery"
wire:model.live="propery"
[ Update propery Live Otherwise , Proprty not updated Unless you ask For it through a Function ]
===============================================
wire:click="Function()"
wire:click="Function({{ $param->id }})"
===============================================
<form wire.submit.prevent="saveStudent"></form>
===============================================
<span class="" wire:poll='avgsy'>
= avgsy -> FUNCTION
===============================================
EVENTS 
    {
        $this->dispatch('mandoob-selected', id: $mandoobId);
        use Livewire\Attributes\On;
        #[On('mandoob-updated')]
        public function updateRowCard($id)
        {
            $this->render();
        }
    }
===============================================
Including Livewire Component : 

@livewire('SearchingFilter')
    -> You Write the Name of the ".php" FIle ,, The Class File
    -> NOT the View File
===============================================
Mounting Component : 
{
    <livewire:Datarow :mandoob="$mandoob">
    public function mount($mandoob = null)
    {
        /**
        * IMPORTANT to use the mount() method For that !!
        @livewire('Listform', ['list_id' => $viewedList->id])
        $## This REquires mounting
        */
        $this->mandoob = $mandoob;
    }
}
===============================================
===============================================
===============================================
<livewire:Datarow :mandoob="$mandoob">
@livewire('Datarow', ['mandoob' => $mandoob], key($mandoob->id))
  {{-- Passing [ VIEW] + [PARAMS to MOUNT Method ] --}}   # REquires mounting 
===============================================
===============================================
1- Creating the LiveWire Components : [VWR]
    $ php artisan make:livewire Componentvr
    {
        This Command will have Two parts :
        [ Class -> Has Data and Logic ]
        [ View -> A reactive html Component which you Can Embed in any Place  ]

        This Means For Example you Can Make Comments Section a [ LiveWire Component ] And Rest of Page is Normal Blade But this Means when Embeding this LiveWire-Compoent inside this Balde it will be "Reactive Component"
    }

LiveWire Class Has Properties -> Specific to Class

Want to Make Everything Very Reactive ??
    = Attach those Class Properties to the DB models
    - So In a Nutshell : ALL you need ONLY is sending Ids to the Classes Of livewire
    From There you Maniuplate the DB and "Wire" DB data with the Properties !!
===============================================
VERY IMPORTANT : when i tried to include the LinkEditingModal LiveWire Component
inside another LiveWire Component There was An Error Happening TILL i
put the Modal inside NORMAL blade File ;
I am Still searching For reasong But Be Careful
===============================================
wire:loading.class.add="btn disabled p-0"
 <div wire:loading wire:target="updateProfileData">Uploading...</div>
    ## This is the Spinner Or Loader Waiting
    ## wire:loading Means it is a Loader  ;
    ## target indicates what it will be waiting for ?
        ## Could be input filed "Normal Thing"
        ## and It Could be Also a Method in the Class
        ## Just like the Polling with Functions in Livewire  ;
===============================================
===============================================
Question : If i Have Propery in a LiveWire ,, What if Difference If
I initiate Value In mount() VS render() ????
===============================================
Making the 'mount()' Function Listen To an Event ?
    - Is that Ok ?
===============================================
VERY IMPORTANT : when i tried to include the LinkEditingModal LiveWire Component
inside another LiveWire Component There was An Error Happening TILL i
put the Modal inside NORMAL blade File ;
I am Still searching For reasong But Be Careful
===============================================
Q/ How to Make the LiveWire ?
    - First Create the Blade Template With all needed Things you want  ;
    - Now Look at the Blade and Divide Divs and all Parts Into Components as you want
    - Create For each One a LiveWire Component and ONLY put the Blade/HTML in the "View" Part Of the Livewire Component ,,
    - Include this View Part in the "Main" Blade File ,, Use the @livewire()
    - You @livewire() Like the @include Directive
    - Now Go to each Component and Deal with the Class File :
        - See what Kind Of data You want to fill the Compoent and Fill it
        [
            - See What models you want to deal with  ;
         ]
===============================================
If you Want The Compoent VERY responsive :
         - Use mount to Get Id
         - Use Render and Send Data always With Render :
            - and When sending to render Make it Grabbing Data From Models Directly
===============================================
=======================#################$$
<div></div>
{{-- Attempt to read property "childNodes" on null --}}
To avoid this 'attempt' error put this empty div tags
{{-- THIS IS GOING TO BE THE CODE FOR EVENTS cOMING FROM JS TO LIVEWIRE  --}}
Events from js going to livewire "Based On other events from browser"
<script>
    document.addEventListener('livewire:initialized', () => {
        // @this.on('post-created', (event) => {
        //     @this.dispatch('refresh-posts');
        // });
        // ===============================
        $("#e2").select2({
            tags: true,
            tokenSeparators: [',', ' '],
            placeholder: 'Enter Tags and Seperate with Comma',
            maximumInputLength: 50,
        });
        // ===============================
        $('#e2').on('select2:select', function(e) {
            @this.dispatch('tagAdded', {
                tag: e.params.data
            });
        }); // ! OK and Done
        // ===============================
        // ===============================
        $('#e2').on('select2:unselect', function(e) {
            @this.dispatch('tagRemoved', {
                tag: e.params.data
            });
        }); // Ok and Done Too
        // ===============================
    });
</script>
=======================#################$$